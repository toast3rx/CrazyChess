#ifndef BISHOPS_H
#define BISHOPS_H
#define SQUARES 64
#define ROWS 8
#define COLUMNS 8
#include <bits/stdc++.h>
#include "../PlaySide.h"
#include "../Move.h"
#include "../Utils.h"

class Bishops {
public:
    uint64_t bishops;

    static uint64_t all_moves[SQUARES], legal_moves[512], blockers[512], bishopAttacks[SQUARES][SQUARES * 8];

    Bishops(uint64_t _bishops);

std::vector<Move*> getMoves(PlaySide side, uint64_t blackPieces, uint64_t whitePieces, uint64_t allPieces);

// std::pair < std::string, std::string > convert_table_to_positions(uint64_t source, uint64_t &goodSquares);

void debug(uint64_t matrix);

int64_t count_set_bits(uint64_t n);

uint64_t generate_legal_moves(uint64_t square, uint64_t blockers);

void ripple_carry(uint64_t square, uint64_t all_moves);

uint64_t generate_all_moves(uint64_t square);

uint64_t gen_number();

void init();

constexpr static const int64_t bishop_bits[64] = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6
};

constexpr static const uint64_t bishopMagic[64] = {
    4175967996469991013ULL,
    2964623841176871860ULL,
    718669546801877377ULL,
    1316283661049593904ULL,
    3262412758536176766ULL,
    2788078735035990659ULL,
    4462265326708469990ULL,
    6592799334141862101ULL,
    8616312311322850049ULL,
    7897066491185157668ULL,
    397753654142304436ULL,
    8594972173681823896ULL,
    901136709366786368ULL,
    6740227576636330177ULL,
    1507608284520124736ULL,
    8785117667595275425ULL,
    1430832286167945989ULL,
    880238159740349381ULL,
    3336900538171131660ULL,
    2755435862317614338ULL,
    5156669222656953600ULL,
    8158359778939180672ULL,
    5962242630520867488ULL,
    6451224575679423292ULL,
    8733664432137315518ULL,
    8720709525908490149ULL,
    6110397622251749718ULL,
    1193560740177904289ULL,
    1910411696859529446ULL,
    6442997480163390555ULL,
    8416750323156256950ULL,
    4910712870017189990ULL,
    2905163937196622501ULL,
    6194143183753988480ULL,
    7116555059672282624ULL,
    838568447457958144ULL,
    3787604194201124992ULL,
    5717161573777483392ULL,
    3420851167184618152ULL,
    8898904905693008329ULL,
    3546032830710940290ULL,
    2678294992823255817ULL,
    8186742957123114707ULL,
    5078684440472415466ULL,
    2253566107633327624ULL,
    6794825524308623266ULL,
    8829025830815671124ULL,
    3237905446608650872ULL,
    7568342541788070181ULL,
    6425270091583393986ULL,
    2575912894973963378ULL,
    1567816815031385016ULL,
    4255346751518293406ULL,
    8890458067422091984ULL,
    8586433112085905740ULL,
    8547670561097147524ULL,
    6639788361832727355ULL,
    7403948252960483338ULL,
    7167823276889559924ULL,
    4278212886845680177ULL,
    5464909400031252766ULL,
    2516467011607729932ULL,
    8506843300678544583ULL,
    4881929820438073796ULL
    };
};

#endif